#ifndef VERSION_HPP
#define VERSION_HPP

#include <string>

// Defines for compile time
#cmakedefine BUILD_TYPE_DEBUG
#cmakedefine BUILD_TYPE_RELEASE
#cmakedefine BUILD_TYPE_RELEASE_DEBUG_INFO

constexpr auto SOURCES_PATH("@SOURCES_DIR@");

namespace Engine::Debug::BuildInfo {

    constexpr int VERSION_MAJOR  {@VulkanEngine_VERSION_MAJOR@};
    constexpr int VERSION_MINOR  {@VulkanEngine_VERSION_MINOR@};
    constexpr int VERSION_PATCH  {@VulkanEngine_VERSION_PATCH@};

    enum class BuildType {
        DEBUG,
        RELEASE,
        RELEASE_DEBUG_INFO
    };

    constexpr std::string_view BUILD_TYPE_STR { "@CMAKE_BUILD_TYPE@" };

    constexpr BuildInfo::BuildType GetBuildType() {
        if      constexpr   (BUILD_TYPE_STR == std::string_view("Debug"))           { return BuildType::DEBUG;              }
        else if constexpr   (BUILD_TYPE_STR == std::string_view("Release"))         { return BuildType::RELEASE;            }
        else if constexpr   (BUILD_TYPE_STR == std::string_view("RelWithDebInfo"))  { return BuildType::RELEASE_DEBUG_INFO; }
    }

    constexpr std::string_view GetVersionString() {
        return { "@VulkanEngine_VERSION_MAJOR@.@VulkanEngine_VERSION_MINOR@.@VulkanEngine_VERSION_PATCH@ (@CMAKE_BUILD_TYPE@)" };
    }
}

#endif // !VERSION_HPP
