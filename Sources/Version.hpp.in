#ifndef VERSION_HPP
#define VERSION_HPP

#include <string>

// Defines for compile time
#cmakedefine BUILD_TYPE_DEBUG
#cmakedefine BUILD_TYPE_RELEASE
#cmakedefine BUILD_TYPE_RELEASE_DEBUG_INFO

constexpr auto SOURCES_PATH("@SOURCES_DIR@");

namespace Engine::Debug::BuildInfo {

    constexpr int Version_Major  {@VulkanEngine_VERSION_MAJOR@};
    constexpr int Version_Minor  {@VulkanEngine_VERSION_MINOR@};
    constexpr int Version_Patch  {@VulkanEngine_VERSION_PATCH@};

    constexpr std::string_view BuildTypeString  {"@CMAKE_BUILD_TYPE@"};
    constexpr std::string_view CompilerName     {"@CMAKE_CXX_COMPILER_ID@"};
    constexpr std::string_view CompilerVersion  {"@CMAKE_CXX_COMPILER_VERSION@"};

    enum class BuildType {
        Debug,
        Release,
        ReleaseDebugInfo
    };

    constexpr BuildInfo::BuildType GetBuildType() {
        if      constexpr   (BuildTypeString == std::string_view("Debug"))           { return BuildType::Debug;              }
        else if constexpr   (BuildTypeString == std::string_view("Release"))         { return BuildType::Release;            }
        else if constexpr   (BuildTypeString == std::string_view("RelWithDebInfo"))  { return BuildType::ReleaseDebugInfo;  }
    }

    constexpr std::string_view GetVersionString() {
        return { "@VulkanEngine_VERSION_MAJOR@.@VulkanEngine_VERSION_MINOR@.@VulkanEngine_VERSION_PATCH@ (@CMAKE_BUILD_TYPE@)" };
    }

    constexpr std::string_view GetCompilerString() {
        return { "@CMAKE_CXX_COMPILER_ID@ @CMAKE_CXX_COMPILER_VERSION@" };
    }
}

#endif // !VERSION_HPP
